# Note: this workflow uses specialized conda envs, run with 'snakemake --use-conda'.

# TODO: needs final debug iteration, after the dust settles

# The config file contains a high-level summary of pipeline configuration and inputs.
# It is ingested by the Snakefile, and also intended to be human-readable.
# For an example config file, see pipeline/example_config.yaml in the covid-19-sequencing repo.

configfile: "example_config.yaml"


######################################   High-level targets   ######################################


rule sort:
    input: expand('fastq_sorted/R{r}_fastqc.html', r=[1,2])
    
rule remove_primers:
    input: expand('fastq_primers_removed/R{r}.fastq.gz', r=[1,2])

rule trim:
    input: expand('fastq_trimmed/R{r}_{s}_fastqc.html', r=[1,2], s=['paired','unpaired'])

rule hostremove:
    input: expand('fastq_host_removed/R{r}.fastq.gz', r=[1,2])
    
rule assemble:
    input: 'assembled/assembly.fasta'

rule breseq:
    input: 'breseq/output/index.html'
    
rule hisat2:
    input: 'hisat2/output.bam'

rule consensus:
    input: 'consensus/virus.consensus'

rule ivar_variants:
    input: 'ivar_variants/ivar_variants'

rule kraken2:
    input: 'kraken2/kraken2.out'

rule lmat:
    input: 'lmat/parseLMAT_output.txt'

rule quast:
    input: 'quast/report.html'

rule all:
    input:
        rules.sort.input,
        rules.remove_primers.input,
        rules.trim.input,
        rules.hostremove.input,
        rules.assemble.input,
        rules.breseq.input,
        rules.hisat2.input,
        rules.consensus.input,
        rules.ivar_variants.input,
        rules.kraken2.input,
        rules.lmat.input,
        rules.quast.input


#################################   Based on scripts/assemble.sh   #################################


rule concat_and_sort:
    output:
        'fastq_sorted/R{r}.fastq.gz'
    input:
        lambda wildcards: config[f'input_fastq_files_R{wildcards.r}']
    shell:
        'zcat {input} | paste - - - - | sort -k1,1 -t " " | tr "\\t" "\\n" | gzip > {output}'


rule run_fastqc:
    conda: 'conda_envs/trim_qc.yaml'
    output: multiext('{s}_fastqc', '.html', '.zip')
    input: '{s}.fastq.gz'
    log: '{s}_fastqc.log',
    shell: 'fastqc {input} 2>{log}'


rule run_cutadapt:
    threads: 25
    conda: 'conda_envs/trim_qc.yaml'
    output:
        expand('fastq_primers_removed/R{r}.fastq.gz', r=[1,2])
    input:
        expand('fastq_sorted/R{r}.fastq.gz', r=[1,2])
    log:
        'fastq_primers_removed/cutadapt.log'
    params:
        primer_fw = config['primer_fw'],
        primer_rc = config['primer_rc']
    shell:
        'cutadapt -j {threads}'
	' -a file:{params.primer_rc} -A file:{params.primer_fw}'   # primers
	' -o {output[0]} -p {output[1]}'     # output files
	' {input}'                           # input files
        ' >{log}'                            # log file

# Note: expand()-statements in 'output:' and 'input:' have been written so that the ordering
# of their outputs is consistent with the ordering of trimmomatic's command-line arguments.

rule run_trimmomatic:
    threads: 20
    conda: 'conda_envs/trim_qc.yaml'
    output:
        expand('fastq_trimmed/R{r}_{s}.fastq.gz', r=[1,2], s=['paired','unpaired'])
    input:
        expand('fastq_primers_removed/R{r}.fastq.gz', r=[1,2])
    log:
        'fastq_trimmed/trim.log'
    params:
        targs = config['trimmomatic_args']
    shell:
        'trimmomatic PE -threads {threads} {input} {output} {params.targs} 2>{log}'

############################  Based on scripts/remove_host_sequences.sh  ###########################


rule hostremove_hisat2_build:
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'fastq_host_removed/sars-cov-2.1.ht2'
    log:
        'fastq_host_removed/hisat2-build.log'
    params:
        reference = config['hostremove_reference']
    shell:
        'hisat2-build {params.reference} fastq_host_removed/sars-cov-2 >{log} 2>&1'


rule hostremove_hisat2:
    threads: 20
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'fastq_host_removed/mapped_and_unmapped.sam'
    input:
        'fastq_trimmed/R1_paired.fastq.gz',
        'fastq_trimmed/R2_paired.fastq.gz',
        'fastq_host_removed/sars-cov-2.1.ht2'
    log:
        'fastq_host_removed/hisat2.log'
    shell:
        'hisat2 --threads {threads}'
        ' -x fastq_host_removed/sars-cov-2'
	' -1 {input[0]} -2 {input[1]}'
	' --summary-file fastq_host_removed/hisat2_summary.txt'
	' -S {output}'
	' 2>{log}'


rule hostremove_sam_to_bam:
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'fastq_host_removed/mapped_and_unmapped.bam'
    input:
        'fastq_host_removed/mapped_and_unmapped.sam'
    shell:
        'samtools view -bS {input} > {output}'


rule hostremove_map_pairs:
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'fastq_host_removed/both_ends_mapped.bam'
    input:
        'fastq_host_removed/mapped_and_unmapped.bam'
    shell:
        'samtools view -b -f 3 -F 4 {input} > {output}'


rule hostremove_sort:
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'fastq_host_removed/both_ends_mapped_sorted.bam'
    input:
        'fastq_host_removed/both_ends_mapped.bam'
    shell:
        'samtools sort -T tmp -n {input} -o {output}'


rule hostremove_bam_to_fastq:
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'fastq_host_removed/R1.fastq',
        'fastq_host_removed/R2.fastq'
    input:
        'fastq_host_removed/both_ends_mapped_sorted.bam'
    shell:
        'bedtools bamtofastq -i {input} -fq {output[0]} -fq2 {output[1]}'


rule hostremove_gzip:
    output:
        'fastq_host_removed/R{r}.fastq.gz'
    input:
        'fastq_host_removed/R{r}.fastq'
    shell:
         'gzip {input}'


#########################  placeholder: assembling with unicycler for now  #########################


rule run_unicycler:
    threads: 20
    conda: 'conda_envs/assembly.yaml'
    output:
        'assembled/assembly.fasta'
    input:
        expand('fastq_host_removed/R{r}.fastq.gz', r=[1,2])
    log:
        'assembled/assembly.log'
    params:
        outdir = 'assembled'
    shell:
        'unicycler -1 {input[0]} -2 {input[1]} --threads {threads} --mode conservative --verbosity 2 -o {params.outdir} >{log}'


################################   Based on scripts/breseq.sh   ####################################


rule run_breseq:
    threads: 80
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'breseq/output/index.html'
    input:
        expand('fastq_trimmed/R{r}_paired.fastq.gz', r=[1,2])
    log:
        'breseq/breseq.log',
    params:
        ref = config['breseq_reference'],
	outdir = 'breseq'
    shell:
        'breseq --reference {params.ref} --num-processors {threads} --polymorphism-prediction --brief-html-output --output {params.outdir} {input} >{log} 2>&1'


################################   Based on scripts/hisat2.sh   ####################################


rule run_hisat2_build:
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'hisat2/genome.1.ht2'
    input:
         'assembled/assembly.fasta'
    log:
         'hisat2/hisat2-build.log'
    shell:
         'hisat2-build {input} hisat2/genome >{log} 2>&1'


rule run_hisat2:
    threads: 20
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'hisat2/output.sam'
    input:
        'fastq_trimmed/R1_paired.fastq.gz',
        'fastq_trimmed/R2_paired.fastq.gz',
        'hisat2/genome.1.ht2'
    log:
        'hisat2/hisat2.log'
    shell:
        'hisat2 --threads {threads}'
        ' -x hisat2/genome'
	' -1 {input[0]} -2 {input[1]}'
	' --summary-file hisat2/summary.txt'
	' -S hisat2/output.sam'
	' 2>{log}'


rule hisat2_sam_to_bam:
    threads: 20
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        'hisat2/output.bam'
    input:
        'hisat2/output.sam'
    shell:
        'samtools view --threads {threads} -b {input} > {output}'


################################   Based on scripts/kraken2.sh   ###################################


rule run_kraken2:
    threads: 20
    conda: 'conda_envs/trim_qc.yaml'
    output:
        'kraken2/kraken2.out'
    input:
        expand('fastq_trimmed/R{r}_paired.fastq.gz', r=[1,2])
    log:
        'kraken2/kraken2.log'
    params:
        outdir = 'kraken2',
	db = config['kraken2_db']
    shell:
        'cd {params.outdir} '
	'&& kraken2'
	' --db {params.db}'
	' --threads {threads}'
	' --quick --unclassified-out unclassified-sequences# --classified-out classified-sequences#'
	' --output kraken2.out'
	' --paired --gzip-compressed'
	' ../{input[0]} ../{input[1]}'
	' --report report'
        ' 2>../{log}'


##################################   Based on scripts/lmat.sh   ####################################


rule lmat_pretile:
    output:
        'lmat/assembly.tiled.fasta'
    input:
        'assembled/assembly.fasta'
    params:
        fsize = config['lmat_fragment_size']
    shell:
        'fatile {input} {params.fsize} > {output}'


rule run_lmat:
    threads: 20
    output:
        'lmat/assembly.tiled.fasta.{db}.lo.rl_output0.out'
    input:
        'lmat/assembly.tiled.fasta'
    params:
        outdir = 'lmat',
        logfile = 'lmat/assembly.tiled.fasta.{db}.lo.rl_output.log',
        lmat_basedir = config['lmat_basedir'],
        lmat_db = '{db}'
    script:
        'lmat_wrapper.py'


rule lmat_postprocess:
    output:
        'lmat/parseLMAT_output.txt'
    input:
        expand('lmat/assembly.tiled.fasta.{db}.lo.rl_output0.out', db=[config['lmat_db']])
    shell:
        'cd lmat && parseLMAT > parseLMAT_output.txt'


##################################  Based on scripts/quast.sh   ####################################


rule run_quast:
    threads: 20
    conda: 'conda_envs/assembly_qc.yaml'
    output:
         'quast/report.html'
    input:
         'assembled/assembly.fasta'
    log:
         'quast/quast.log'
    params:
         outdir = 'quast',
         genome = config['quast_reference_genome'],
         fcoords = config['quast_feature_coords']
    shell:
         'quast {input} -r {params.genome} -g {params.fcoords} --output-dir {params.outdir} --threads {threads} >{log}'


###### Based on github.com/connor-lab/ncov2019-artic-nf/blob/master/modules/illumina.nf#L124 ######

rule run_consensus:
    threads: 20
    conda: 'conda_envs/ivar.yaml'
    output:
        'consensus/virus.consensus'
    input:
        'hisat2/output.bam'
    log:
        'consensus/ivar.log'
    params:
        mpileup_depth = config['mpileup_depth'],
        ivar_min_coverage_depth = config['ivar_min_coverage_depth'],
        ivar_freq_threshold = config['ivar_freq_threshold']
    shell:
        """
        samtools mpileup -A -d {params.mpileup_depth} -Q0 {input} | \
        ivar consensus -t {params.ivar_freq_threshold} -m {params.ivar_min_coverage_depth} \
                                    -n N -p {output} 2> >> {log}
        """

rule run_ivar_variants:
    threads: 20
    conda: 'conda_envs/ivar.yaml'
    output:
        'ivar_variants/ivar_variants'
    input:
        reference = 'hisat2/genome.1.ht2',
        read_bam = 'hisat2/output.bam'
    params:
        ivar_min_coverage_depth = config['ivar_min_coverage_depth'],
        ivar_min_freq_threshold = config['ivar_min_freq_threshold'],
        ivar_min_variant_quality = config['ivar_min_variant_quality']
    shell:
        """
        samtools mpileup -A -d 0 --reference {input.reference} -B -Q 0 ${input.read_bam} |\
        ivar variants -r {input.reference} -m {params.ivar_min_coverage_depth} -p {output} -q {params.ivar_min_variant_quality} -t ${params.ivar_min_freq_threshold}
        """
