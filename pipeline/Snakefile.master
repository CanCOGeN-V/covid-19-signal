# Note: this workflow uses specialized conda envs, run with 'snakemake --use-conda'.

# TODO: log files
# TODO: needs final debug iteration, after the dust settles

# The config file contains a high-level summary of pipeline configuration and inputs.
# It is ingested by the Snakefile, and also intended to be human-readable.
# For an example config file, see pipeline/example_config.yaml in the covid-19-sequencing repo.

configfile: "config.yaml"


######################################   High-level targets   ######################################


rule sort:
    input: expand('fastq_sorted/{p}_R{r}_fastqc.html', p=[config['prefix']], r=[1,2])
    
rule remove_primers:
    input: expand('fastq_primers_removed/{p}_R{r}.fastq.gz', p=[config['prefix']], r=[1,2])

rule trim:
    input: expand('fastq_trimmed/{p}_R{r}_{s}_fastqc.html', p=[config['prefix']], r=[1,2], s=['paired','unpaired'])
    
rule assemble:
    input: expand('{p}_assembled/assembly.fasta', p=[config['prefix']])

rule breseq:
    input: expand('{p}_breseq/output/index.html', p=[config['prefix']])
    
rule hisat2:
    input: expand('{p}_hisat2/output.bam', p=[config['prefix']])

rule kraken2:
    input: expand('{p}_kraken2/kraken2.out', p=[config['prefix']])

rule lmat:
    input: expand('{p}_lmat/parseLMAT_output.txt', p=[config['prefix']])

rule quast:
    input: expand('{p}_quast/report.html', p=[config['prefix']])

rule all:
    input:
        rules.sort.input,
        rules.remove_primers.input,
        rules.trim.input,
        rules.assemble.input,
        rules.breseq.input,
        rules.hisat2.input,
        rules.kraken2.input,
        rules.lmat.input,
        rules.quast.input


#################################   Based on scripts/assemble.sh   #################################


rule concat_and_sort:
    output:
        expand('fastq_sorted/{p}_R{{r}}.fastq.gz', p=[config['prefix']])
    input:
        lambda wildcards: config[f'input_fastq_files_R{wildcards.r}']
    shell:
        'zcat {input} | paste - - - - | sort -k1,1 -t " " | tr "\\t" "\\n" | gzip > {output}'


rule run_fastqc:
    conda: 'conda_envs/trim_qc.yaml'
    output: multiext('{s}_fastqc', '.html', '.zip')
    input: '{s}.fastq.gz'
    shell: 'fastqc {input}'


rule run_cutadapt:
    threads: 25
    conda: 'conda_envs/trim_qc.yaml'
    output:
        expand('fastq_primers_removed/{{p}}_R{r}.fastq.gz', r=[1,2])
    input:
        expand('fastq_sorted/{{p}}_R{r}.fastq.gz', r=[1,2])
    params:
        primer_R1 = config['primer_R1'],
        primer_R2 = config['primer_R2']
    shell:
        'cutadapt -j {threads}'
	' -a file:{params.primer_R1} -A file:{params.primer_R2}'   # primers
	' -o {output[0]} -p {output[1]}'     # output files
	' {input}'                           # input files


# Note: expand()-statements in 'output:' and 'input:' have been written so that the ordering
# of their outputs is consistent with the ordering of trimmomatic's command-line arguments.

rule run_trimmomatic:
    threads: 20
    conda: 'conda_envs/trim_qc.yaml'
    output:
        expand('fastq_trimmed/{{p}}_R{r}_{s}.fastq.gz', r=[1,2], s=['paired','unpaired'])
    input:
        expand('fastq_primers_removed/{{p}}_R{r}.fastq.gz', r=[1,2])
    params:
        targs = config['trimmomatic_args']
    shell:
        'trimmomatic PE -threads {threads} {input} {output} {params.targs}'


rule run_unicycler:
    threads: 20
    conda: 'conda_envs/assembly.yaml'
    output:
        '{p}_assembled/assembly.fasta'
    input:
        expand('fastq_trimmed/{{p}}_R{r}_paired.fastq.gz', r=[1,2])
    params:
        outdir = '{p}_assembled'
    shell:
        'unicycler -1 {input[0]} -2 {input[1]} --threads {threads} --mode conservative --verbosity 2 -o {params.outdir}'


################################   Based on scripts/breseq.sh   ####################################


rule run_breseq:
    threads: 80
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        '{p}_breseq/output/index.html'
    input:
        expand('fastq_trimmed/{{p}}_R{r}_paired.fastq.gz', r=[1,2])
    params:
        ref = config['breseq_reference'],
	outdir = '{p}_breseq'
    shell:
        'breseq --reference {params.ref} --num-processors {threads} --polymorphism-prediction --brief-html-output --output {params.outdir} {input}'


################################   Based on scripts/hisat2.sh   ####################################


rule run_hisat2_build:
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        '{s}_hisat2/genome.1.ht2'
    input:
         '{s}_assembled/assembly.fasta'
    shell:
         'mkdir -p {wildcards.s}_hisat2 && hisat2-build {input} {wildcards.s}_hisat2/genome'


rule run_hisat2:
    threads: 20
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        '{s}_hisat2/output.sam'
    input:
        'fastq_trimmed/{s}_R1_paired.fastq.gz',
        'fastq_trimmed/{s}_R2_paired.fastq.gz',
        '{s}_hisat2/genome.1.ht2'
    shell:
        'hisat2 --threads {threads}'
        ' -x {wildcards.s}_hisat2/genome'
	' -1 {input[0]} -2 {input[1]}'
	' --summary-file {wildcards.s}_hisat2/summary.txt'
	' -S {wildcards.s}_hisat2/output.sam'


rule hisat2_sam_to_bam:
    threads: 20
    conda: 'conda_envs/snp_mapping.yaml'
    output:
        '{s}_hisat2/output.bam'
    input:
        '{s}_hisat2/output.sam'
    shell:
        'samtools view --threads {threads} -b {input} > {output}'


################################   Based on scripts/kraken2.sh   ###################################


rule run_kraken2:
    threads: 20
    conda: 'conda_envs/trim_qc.yaml'
    output:
        '{s}_kraken2/kraken2.out'
    input:
        expand('fastq_trimmed/{{s}}_R{r}_paired.fastq.gz', r=[1,2])
    params:
        outdir = '{s}_kraken2',
	db = config['kraken2_db']
    shell:
        'mkdir -p {params.outdir} '
	'&& cd {params.outdir} '
	'&& kraken2'
	' --db {params.db}'
	' --threads {threads}'
	' --quick --unclassified-out unclassified-sequences# --classified-out classified-sequences#'
	' --output kraken2.out'
	' --paired --gzip-compressed'
	' ../{input[0]} ../{input[1]}'
	' --report report'



##################################   Based on scripts/lmat.sh   ####################################


rule lmat_pretile:
    output:
        '{s}_lmat/assembly.tiled.fasta'
    input:
        '{s}_assembled/assembly.fasta'
    params:
        fsize = config['lmat_fragment_size']
    shell:
        'fatile {input} {params.fsize} > {output}'


rule run_lmat:
    threads: 20
    output:
        '{prefix}_lmat/assembly.tiled.fasta.{db}.lo.rl_output0.out'
    input:
        '{prefix}_assembled/assembly.fasta'
    params:
        outdir = '{prefix}_lmat',
        logfile = '{prefix}_lmat/assembly.tiled.fasta.{db}.lo.rl_output.log',
        lmat_basedir = config['lmat_basedir'],
        lmat_db = '{db}'
    script:
        'lmat_wrapper.py'


rule lmat_postprocess:
    output:
        '{prefix}_lmat/parseLMAT_output.txt'
    input:
        expand('{{prefix}}_lmat/assembly.tiled.fasta.{db}.lo.rl_output0.out', db=[config['lmat_db']])
    shell:
        'cd {wildcards.prefix}_lmat && parseLMAT > parseLMAT_output.txt'


##################################  Based on scripts/quast.sh   ####################################


rule run_quast:
    threads: 20
    conda: 'conda_envs/assembly_qc.yaml'
    output:
         '{s}_quast/report.html'
    input:
         '{s}_assembled/assembly.fasta'
    params:
         outdir = '{s}_quast',
         genome = config['quast_reference_genome'],
         fcoords = config['quast_feature_coords']
    shell:
         'quast {input} -r {params.genome} -g {params.fcoords} --output-dir {params.outdir} --threads {threads}'
